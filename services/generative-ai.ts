import { GoogleGenAI, Type } from "@google/genai";
// FIX: Added 'DreamEntry' to the import list to fix 'Cannot find name' error.
import { JournalCoachAnalysis, ThoughtCase, Ritual, GuidedJourney, JournalEntry, AssessmentQuestion, AssessmentResult, RitualTask, Suggestion, ConversationFeedback, ProactiveSuggestion, UnsentLetterAnalysis, GoalLinkedModule, FoodLog, HerbariumInfo, CrystalInfo, ArtTherapyAnalysis, SynthesisReport, TreeInfo, AnimalInfo, Chronotype, InnerSeason, CoreWound, ProgressAnalysis, RelationalContact, RelationalEcosystemAnalysis, AppSettings, BodyMapAnalysis, PersonalizedPath, CoachPersonality, CoachTone, Connection, FearSettingExercise, FearSettingAnalysis, ConnectableItem, JOURNAL_STORAGE_KEY, THOUGHT_COURT_STORAGE_KEY, GOALS_STORAGE_KEY, UNSENT_LETTER_STORAGE_KEY, BODY_MAP_STORAGE_KEY, FEAR_SETTING_STORAGE_KEY, Goal, UnsentLetter, BodyMapEntry, ThematicSynthesis, OracleCard, OracleDraw, DreamAnalysis, NarrativeArcEntry, NarrativeArcAnalysis, ModuleId, DREAM_JOURNAL_STORAGE_KEY, DreamEntry } from '../types';
import { GEMINI_FLASH_MODEL } from './constants';
import { moodOptions } from '../data';
import { getTimeOfDay } from '../utils/dateHelpers';
import { generateContextualSummary } from '../utils/dataSummary';
import { storage } from "../utils/storage";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * A helper function to generate JSON content from the AI model.
 * It abstracts the API call, response parsing, and basic error handling.
 * @param prompt The instructional string sent to the model.
 * @param schema The expected JSON schema for the response.
 * @returns A promise that resolves to the parsed JSON object of type T.
 */
async function generateJsonFromAi<T>(prompt: string, schema: object): Promise<T> {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: prompt,
        config: {
            responseMimeType: "application/json",
            responseSchema: schema,
        },
    });

    const jsonText = response.text.trim();
    if (!jsonText) {
        throw new Error("AI returned an empty response, which cannot be parsed as JSON.");
    }
    return JSON.parse(jsonText) as T;
}

export const getCoachSystemInstruction = (settings: AppSettings): string => {
    const personalityMap: Record<CoachPersonality, string> = {
        'Bienveillant': "Tu es Hal, un coach en bien-√™tre bienveillant, sage et empathique. Ton approche est douce et tu privil√©gies l'√©coute et le soutien inconditionnel.",
        'Direct': "Tu es Hal, un coach en bien-√™tre direct et pragmatique. Tu vas droit au but pour aider l'utilisateur √† atteindre ses objectifs, en posant des questions claires et en proposant des actions concr√®tes.",
        'Philosophe': "Tu es Hal, un coach en bien-√™tre philosophe et introspectif. Tu aimes poser des questions profondes qui invitent √† la r√©flexion sur le sens et les valeurs, en utilisant des m√©taphores et des perspectives plus larges."
    };

    const toneMap: Record<CoachTone, string> = {
        'Encourageant': "Ton ton est toujours positif, chaleureux et plein d'encouragements. Tu c√©l√®bres les petites victoires.",
        'Neutre': "Ton ton est calme, objectif et factuel. Tu fournis des analyses claires sans jugement √©motionnel.",
        'Stimulant': "Ton ton est √©nergique et motivant. Tu pousses gentiment l'utilisateur √† se d√©passer et √† sortir de sa zone de confort."
    };
    
    const baseInstruction = personalityMap[settings.coachSettings.personality];
    const toneInstruction = toneMap[settings.coachSettings.tone];

    return `${baseInstruction} ${toneInstruction} Tu r√©ponds toujours en fran√ßais.`;
};


export const analyzeJournalEntry = async (content: string, foodLogs: FoodLog[] | undefined, userValues: string[], mood: string | undefined, settings: AppSettings, connections?: Connection[]): Promise<JournalCoachAnalysis> => {
    const valuesContext = settings.shareContextWithAI.values && userValues.length > 0
        ? `Prends en compte que les valeurs fondamentales de l'utilisateur sont : ${userValues.join(', ')}.`
        : "";
        
    const moodLabel = moodOptions.find(m => m.emoji === mood)?.label;
    const moodContext = settings.shareContextWithAI.journal && mood && moodLabel
        ? `L'utilisateur a indiqu√© se sentir "${moodLabel}" (${mood}). Prends cela en compte dans ton analyse.`
        : "";
        
    const foodContext = (settings.shareContextWithAI.journal && foodLogs && foodLogs.length > 0)
        ? `L'utilisateur a √©galement enregistr√© les repas suivants aujourd'hui : ${foodLogs.map(log => `${log.mealType}: ${log.description} (ressenti: ${log.moodTags.join(', ')})`).join('; ')}. Cherche des liens potentiels entre son alimentation et son √©tat √©motionnel ou physique d√©crit dans le journal.`
        : "";
    
    let connectionsContext = '';
    if (connections && connections.length > 0) {
        const allowedConnections = connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© au module '${conn.moduleId}' : "${conn.entryTitle}"`);
            connectionsContext = `Cette entr√©e est connect√©e aux √©l√©ments suivants. Utilise ces liens pour trouver des th√®mes plus profonds dans ton analyse:\n${connectionSummaries.join('\n')}`;
        }
    }

    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Analyse cette entr√©e de journal.
- Identifie les √©motions et th√®mes cl√©s.
- Fournis une "emotionalInsight": une observation approfondie (2-3 phrases) sur les sch√©mas √©motionnels, les conflits ou les nuances des sentiments exprim√©s.
- Propose une "suggestedPractice": une pratique de bien-√™tre sp√©cifique et concr√®te que l'utilisateur peut faire. Donne un nom √† la pratique, sa pertinence (rationale), et un emoji (icon).
- Si la pratique sugg√©r√©e correspond directement √† un module de l'application, inclus un "actionModuleId". Les modules actionnables sont : 'calm-space' (pour respiration, m√©ditation), 'gratitude' (pour lister des gratitudes), 'thought-court' (pour d√©fier une pens√©e), 'unsent-letters' (pour exprimer des √©motions envers qqn). Ne l'inclus que si la correspondance est √©vidente.
${valuesContext} ${moodContext} ${foodContext} ${connectionsContext}
Entr√©e de journal : "${content}"`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            emotions: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste des √©motions cl√©s d√©tect√©es (3-5 mots max)."
            },
            themes: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste des th√®mes principaux abord√©s (3-5 mots max)."
            },
            emotionalInsight: {
                type: Type.STRING,
                description: "Une observation approfondie (2-3 phrases) sur les sch√©mas √©motionnels, les conflits ou les nuances de sentiments."
            },
            suggestedPractice: {
                type: Type.OBJECT,
                description: "Une pratique de bien-√™tre sp√©cifique et concr√®te.",
                properties: {
                    name: {
                        type: Type.STRING,
                        description: "Le nom de la pratique sugg√©r√©e (ex: 'Exercice de respiration carr√©e', '√âcrire une lettre de gratitude')."
                    },
                    rationale: {
                        type: Type.STRING,
                        description: "Une courte phrase expliquant pourquoi cette pratique est pertinente pour l'entr√©e."
                    },
                    icon: {
                        type: Type.STRING,
                        description: "Un seul emoji pour repr√©senter la pratique (ex: 'üßò', '‚úçÔ∏è')."
                    },
                    actionModuleId: {
                        type: Type.STRING,
                        description: "Optionnel. Si la pratique est li√©e √† un module, fournir l'ID du module (ex: 'calm-space', 'gratitude')."
                    }
                },
                required: ["name", "rationale", "icon"]
            }
        },
        required: ["emotions", "themes", "emotionalInsight", "suggestedPractice"]
    };

    return generateJsonFromAi<JournalCoachAnalysis>(prompt, schema);
};


export const analyzeThoughtCase = async (
    negativeThought: string,
    evidenceFor: string,
    evidenceAgainst: string,
    settings: AppSettings,
    connections?: Connection[]
): Promise<NonNullable<ThoughtCase['analysis']>> => {
    let connectionsContext = '';
    if (connections && connections.length > 0) {
        const allowedConnections = connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© au module '${conn.moduleId}' : "${conn.entryTitle}"`);
            connectionsContext = `Cette analyse de pens√©e est connect√©e aux √©l√©ments suivants. Utilise ce contexte pour trouver des th√®mes plus profonds dans ton analyse:\n${connectionSummaries.join('\n')}\n`;
        }
    }

    const prompt = `Analyze this cognitive-behavioral therapy thought record. The user is French. Provide the analysis in French.
        ${connectionsContext}
        - Negative Thought: "${negativeThought}"
        - Evidence For: "${evidenceFor}"
        - Evidence Against: "${evidenceAgainst}"`;
     
     const schema = {
        type: Type.OBJECT,
        properties: {
            distortions: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste des distorsions cognitives possibles (ex: 'G√©n√©ralisation excessive', 'Pens√©e tout ou rien')."
            },
            alternativePerspectives: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 perspectives alternatives pour voir la situation diff√©remment."
            },
            balancedThought: {
                type: Type.STRING,
                description: "Une suggestion de pens√©e plus √©quilibr√©e, r√©aliste et constructive."
            }
        },
        required: ["distortions", "alternativePerspectives", "balancedThought"]
    };

    return generateJsonFromAi<NonNullable<ThoughtCase['analysis']>>(prompt, schema);
};

export const generateValueReflection = async (value: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `Generate a single, profound, and open-ended reflection question about the personal value of "${value}". The user is French. The question must be in French. Keep it concise.`
    });
    return response.text.trim().replace(/"/g, ''); // Remove quotes if any
};

export const getOracleInterpretation = async (draw: OracleDraw, pastDraws: OracleDraw[], settings: AppSettings): Promise<string> => {
    let connectionsContext = '';
    if (draw.connections && draw.connections.length > 0) {
        const allowedConnections = draw.connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© √† '${conn.entryTitle}' (${conn.moduleId})`).join('\n');
            connectionsContext = `Ce tirage est connect√© aux √©l√©ments suivants. Prends-les en compte pour une interpr√©tation plus profonde :\n${connectionSummaries}\n`;
        }
    }

    let historyContext = '';
    if (pastDraws.length > 0) {
        const recentDraws = pastDraws.slice(-3);
        historyContext = 'Pour r√©f√©rence, voici les derniers tirages de l\'utilisateur :\n' +
            recentDraws.map(d => `- Tirage '${d.spreadType}' sur la question: "${d.question}"`).join('\n');
    }

    const cardDetails = draw.cards.map(c => 
        `- Position: "${c.position}", Carte: "${c.card.title}", Po√®me: "\n${c.card.poem.join('\n')}"`
    ).join('\n\n');

    const prompt = `Tu es un oracle sage, bienveillant et po√©tique. Un utilisateur a pos√© une question et a effectu√© un tirage. Ton r√¥le est de fournir une interpr√©tation vocale inspirante et douce.

- **Type de Tirage :** "${draw.spreadType}"
- **Question de l'utilisateur :** "${draw.question}"
- **Cartes tir√©es :**
${cardDetails}
- **Contexte (tirages pr√©c√©dents) :** ${historyContext || 'Aucun'}
- **Contexte (connexions) :** ${connectionsContext || 'Aucune'}

Ta r√©ponse doit √™tre formul√©e comme un message parl√©, fluide et naturel √† l'oral.
Structure ta r√©ponse ainsi :
1.  **Interpr√©tation de chaque carte :** Analyse chaque carte l'une apr√®s l'autre, en l'interpr√©tant sp√©cifiquement DANS LE CONTEXTE de sa position (ex: "Dans la position du Pass√©, la carte '...' sugg√®re que..."). Sois concis pour chaque carte.
2.  **Synth√®se Globale :** Apr√®s avoir analys√© chaque carte, fournis une synth√®se globale en 1 ou 2 paragraphes. Relie les messages des cartes entre elles pour former une histoire coh√©rente qui r√©pond √† la question de l'utilisateur.

Sois encourageant et offre une perspective, pas une pr√©diction. La r√©ponse doit √™tre en fran√ßais.`;

    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: prompt,
    });

    return response.text.trim();
};

export const analyzeDreamEntry = async (content: string, emotions: string[], settings: AppSettings, connections?: Connection[]): Promise<DreamAnalysis> => {
    let connectionsContext = '';
    if (connections && connections.length > 0) {
        const allowedConnections = connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© au module '${conn.moduleId}' : "${conn.entryTitle}"`);
            connectionsContext = `Ce r√™ve est connect√© aux √©l√©ments suivants. Utilise ce contexte pour une interpr√©tation plus profonde des symboles:\n${connectionSummaries.join('\n')}\n`;
        }
    }
    
    const prompt = `Agis comme un interpr√®te de r√™ves bienveillant avec une approche jungienne et arch√©typale. Analyse le r√™ve suivant pour un utilisateur fran√ßais.
    - √âmotions ressenties pendant le r√™ve : ${emotions.join(', ') || 'non sp√©cifi√©es'}.
    - ${connectionsContext}
    - Contenu du r√™ve : "${content}"
    
    Fournis une analyse structur√©e en JSON. Ne sois pas prescriptif ou fataliste. Offre des pistes de r√©flexion.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            symbols: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        symbol: { type: Type.STRING, description: "Le nom d'un symbole cl√© identifi√© (ex: 'Une maison', 'L'eau')." },
                        interpretation: { type: Type.STRING, description: "Une br√®ve interpr√©tation symbolique de ce symbole DANS LE CONTEXTE du r√™ve." }
                    },
                    required: ["symbol", "interpretation"]
                },
                description: "Liste de 2 √† 4 symboles cl√©s du r√™ve et leur interpr√©tation."
            },
            overallMeaning: {
                type: Type.STRING,
                description: "Un r√©sum√© (2-3 phrases) de la signification globale possible du r√™ve, en reliant les symboles et les √©motions."
            },
            reflectionPrompt: {
                type: Type.STRING,
                description: "Une question de r√©flexion ouverte pour aider l'utilisateur √† approfondir sa propre interpr√©tation."
            }
        },
        required: ["symbols", "overallMeaning", "reflectionPrompt"]
    };

    return generateJsonFromAi<DreamAnalysis>(prompt, schema);
};


export const generateWeeklyReview = async (
    journalEntries: JournalEntry[],
    rituals: Ritual[],
    completions: { [date: string]: string[] },
    userValues: string[],
    settings: AppSettings,
) => {
    const journalSummary = settings.shareContextWithAI.journal && journalEntries.length > 0
        ? `Journal entries this week: \n${journalEntries.map(e => `- ${e.title}: ${e.content.substring(0, 100)}...`).join('\n')}`
        : "No journal entries this week or sharing disabled.";

    const ritualSummary = settings.shareContextWithAI.ritual && rituals.length > 0
        ? `Rituals tracked: ${rituals.map(r => r.name).join(', ')}. Completion data is available.`
        : "No rituals defined or sharing disabled.";
        
    const valuesContext = settings.shareContextWithAI.values && userValues.length > 0
        ? `The user's core values are: ${userValues.join(', ')}. Tailor the summary and reflection question to these values.`
        : "";

    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} G√©n√®re un bilan hebdomadaire pour un utilisateur. Sois positif, perspicace et doux.
        Donn√©es utilisateur de la semaine:
        ${journalSummary}
        ${ritualSummary}
        ${valuesContext}
        Bas√© sur cela, fournis un objet JSON avec le bilan.`;
        
    const schema = {
        type: Type.OBJECT,
        properties: {
            summary: {
                type: Type.STRING,
                description: "Un r√©sum√© g√©n√©ral et bienveillant de la semaine en 2-3 phrases, si possible en lien avec les valeurs de l'utilisateur."
            },
            highlights: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Une liste de 2-3 points forts ou r√©ussites potentiels bas√©s sur les donn√©es."
            },
            challenges: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Une liste de 1-2 d√©fis ou points de friction potentiels, formul√©s de mani√®re constructive."
            },
            ritualConsistency: {
                type: Type.STRING,
                description: "Un bref commentaire sur la r√©gularit√© des rituels (sans avoir les donn√©es exactes, faire une observation g√©n√©rale et encourageante)."
            },
            reflectionQuestion: {
                type: Type.STRING,
                description: "Une question de r√©flexion pertinente pour la semaine √† venir, inspir√©e par les donn√©es et les valeurs de l'utilisateur."
            }
        },
        required: ["summary", "highlights", "challenges", "ritualConsistency", "reflectionQuestion"]
    };
    
    return generateJsonFromAi<any>(prompt, schema);
};


export const generateGuidedJourney = async (topic: string): Promise<GuidedJourney> => {
    const prompt = `Create a simple 5-day guided journey for a user of a wellness app on the topic of "${topic}". The user is French. The journey should be encouraging and practical. Provide the response in JSON format.`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre inspirant pour le parcours." },
            description: { type: Type.STRING, description: "Une courte description du parcours (1-2 phrases)." },
            days: {
                type: Type.ARRAY,
                description: "Une liste de 5 objets, un pour chaque jour du parcours.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        title: { type: Type.STRING, description: "Un titre court pour la t√¢che du jour (ex: 'Jour 1: Observation')." },
                        task: { type: Type.STRING, description: "Une description claire et concise de la t√¢che ou de l'exercice pour la journ√©e." }
                    },
                    required: ["title", "task"]
                }
            }
        },
        required: ["title", "description", "days"]
    };

    const result = await generateJsonFromAi<any>(prompt, schema);

    if (!result.days || result.days.length < 5) {
        throw new Error("AI failed to generate a valid journey.");
    }
    return { ...result, days: result.days.slice(0, 5) };
};

export const generatePersonalizedPath = async (userGoal: string, settings: AppSettings): Promise<Omit<PersonalizedPath, 'id' | 'userGoal' | 'steps'> & { steps: Omit<import("../types").PathStep, 'completed'>[] }> => {
    const userContext = generateContextualSummary(settings);
    const coachInstruction = getCoachSystemInstruction(settings);
    
    const prompt = `${coachInstruction} Un utilisateur a l'objectif suivant : "${userGoal}".
    Contexte additionnel de l'utilisateur (√† utiliser pour personnaliser subtilement le parcours) : "${userContext}".
    
    Cr√©e un "Parcours Personnalis√©" de 5 √† 7 jours pour l'aider.
    - Donne un titre inspirant et une courte description au parcours.
    - Pour chaque jour, d√©finis une seule √©tape concr√®te, r√©alisable et pertinente.
    - Chaque √©tape doit √™tre li√©e √† un module sp√©cifique de l'application. Choisis le module le plus appropri√© pour la t√¢che.
    - Formule le titre de l'√©tape comme une action claire.
    - Formule la t√¢che (task) comme une instruction bienveillante qui guide l'utilisateur.

    Modules disponibles et leur utilisation :
    - 'journal': Pour l'√©criture libre, l'exploration d'√©motions.
    - 'thought-court': Pour analyser et restructurer des pens√©es n√©gatives sp√©cifiques.
    - 'values': Pour se connecter √† ce qui est important.
    - 'goals': Pour d√©finir des objectifs concrets.
    - 'calm-space': Pour des exercices de relaxation et d'ancrage rapides.
    - 'assessment': Pour un bilan de bien-√™tre g√©n√©ral.
    - 'wounds': Pour l'exploration des blessures √©motionnelles.
    - 'gratitude': Pour cultiver la positivit√©.
    - 'unsent-letters': Pour exprimer des √©motions envers quelqu'un ou quelque chose.
    - 'fear-setting': Pour analyser et surmonter des peurs li√©es √† une action.

    Assure-toi que le parcours est logique, progressif et vari√©. Le format de sortie doit √™tre un JSON.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre inspirant pour le parcours." },
            description: { type: Type.STRING, description: "Une courte description (1-2 phrases) de l'objectif du parcours." },
            steps: {
                type: Type.ARRAY,
                description: "Une liste de 5 √† 7 √©tapes pour le parcours.",
                items: {
                    type: Type.OBJECT,
                    properties: {
                        day: { type: Type.INTEGER, description: "Le num√©ro du jour (commen√ßant √† 1)." },
                        title: { type: Type.STRING, description: "Le titre court et actionnable de l'√©tape." },
                        task: { type: Type.STRING, description: "L'instruction claire et bienveillante pour l'utilisateur." },
                        moduleId: { type: Type.STRING, description: "L'ID du module de l'application √† utiliser (ex: 'journal', 'thought-court')." }
                    },
                    required: ["day", "title", "task", "moduleId"]
                }
            }
        },
        required: ["title", "description", "steps"]
    };

    return generateJsonFromAi<any>(prompt, schema);
};


export const generateAssessmentQuestions = async (): Promise<AssessmentQuestion[]> => {
    const prompt = `G√©n√®re un questionnaire de bien-√™tre non clinique de 5 questions pour une application de sant√© mentale. Les questions doivent √™tre en fran√ßais et inviter √† l'introspection sur des sujets comme le sommeil, l'√©nergie, les relations, la joie et le stress. Pour chaque question, fournis 5 options de r√©ponse sur une √©chelle de Likert, du plus n√©gatif au plus positif. Le format de sortie doit √™tre JSON.`;
    
    const schema = {
        type: Type.ARRAY,
        items: {
            type: Type.OBJECT,
            properties: {
                questionText: { type: Type.STRING, description: "Le texte de la question pos√©e √† l'utilisateur." },
                options: {
                    type: Type.ARRAY,
                    description: "Un tableau de 5 cha√Ænes de caract√®res repr√©sentant les options de r√©ponse.",
                    items: { type: Type.STRING }
                }
            },
            required: ["questionText", "options"]
        }
    };

    const questions = await generateJsonFromAi<AssessmentQuestion[]>(prompt, schema);
    if (!Array.isArray(questions) || questions.length === 0 || questions.some(q => q.options.length !== 5)) {
        throw new Error("AI returned invalid question format.");
    }
    return questions;
};

export const analyzeAssessmentResults = async (questions: AssessmentQuestion[], answers: number[]): Promise<AssessmentResult> => {
    const qaPairs = questions.map((q, i) => `- Question: "${q.questionText}"\n  - R√©ponse: "${q.options[answers[i]]}" (score ${answers[i] + 1}/5)`).join("\n");

    const prompt = `Analyse les r√©ponses suivantes √† un questionnaire de bien-√™tre. L'utilisateur est fran√ßais. Fournis un r√©sum√© bienveillant et encourageant en fran√ßais, sans poser de diagnostic. Mets en √©vidence un point fort et sugg√®re une piste de r√©flexion ou d'am√©lioration douce. Ne donne pas de score num√©rique. Les r√©ponses sont sur une √©chelle de 1 (n√©gatif) √† 5 (positif). Voici les questions et les r√©ponses : \n${qaPairs}`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            positiveHighlight: { type: Type.STRING, description: "Une phrase identifiant un point fort ou un aspect positif dans les r√©ponses." },
            gentleSuggestion: { type: Type.STRING, description: "Une phrase proposant une suggestion douce ou une piste de r√©flexion pour un domaine qui pourrait √™tre am√©lior√©." }
        },
        required: ["positiveHighlight", "gentleSuggestion"]
    };

    return generateJsonFromAi<AssessmentResult>(prompt, schema);
};

export const generateValueMicroActions = async (value: string): Promise<string[]> => {
    const prompt = `Pour la valeur personnelle "${value}", sugg√®re 3 actions concr√®tes, simples et r√©alisables en moins de 15 minutes qu'une personne peut faire aujourd'hui pour l'incarner. La r√©ponse doit √™tre en fran√ßais.`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            actions: {
                type: Type.ARRAY,
                items: { type: Type.STRING }
            }
        },
        required: ["actions"]
    };

    const result = await generateJsonFromAi<{ actions: string[] }>(prompt, schema);
    return result.actions || [];
};

export const generateSuggestionFeed = async (userDataSummary: string, settings: AppSettings): Promise<Suggestion[]> => {
    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Analyse le r√©sum√© des donn√©es utilisateur et g√©n√®re une liste de 3-4 suggestions d'actions pour sa journ√©e.
        - La premi√®re suggestion doit √™tre plus g√©n√©rale, une sorte de "pens√©e du jour" actionnable (marque-la avec isPrimary: true).
        - Les autres suggestions doivent √™tre des actions concr√®tes li√©es aux modules de l'application (journal, ritual, values, goals, thought-court, etc.).
        - Personnalise la "raison" pour chaque suggestion en te basant sur les donn√©es.
        - Sois concis.
        - Les moduleId valides sont: 'journal', 'thought-court', 'ritual', 'values', 'goals', 'assessment'.
        
        Donn√©es: "${userDataSummary}"`;
        
    const schema = {
        type: Type.ARRAY,
        items: {
            type: Type.OBJECT,
            properties: {
                title: { type: Type.STRING, description: "Le titre actionnable de la suggestion (ex: 'R√©fl√©chissez √† votre journ√©e')." },
                reason: { type: Type.STRING, description: "La raison personnalis√©e pour laquelle l'utilisateur voit cette suggestion (ex: 'Il semble que vous n'ayez pas encore √©crit aujourd'hui.')." },
                ctaText: { type: Type.STRING, description: "Le texte du bouton d'action (ex: 'Ouvrir le journal')." },
                moduleId: { type: Type.STRING, description: "L'ID du module √† ouvrir (ex: 'journal')." },
                isPrimary: { type: Type.BOOLEAN, description: "True si c'est la suggestion principale, sinon false." },
            },
            required: ["title", "reason", "ctaText", "moduleId", "isPrimary"]
        }
    };

    const result = await generateJsonFromAi<Suggestion[]>(prompt, schema);
    if (!Array.isArray(result) || result.length === 0) {
        throw new Error("AI failed to generate a valid suggestion feed.");
    }
    if (!result.some(r => r.isPrimary)) {
        result[0].isPrimary = true;
    }
    return result;
};


export const generateRitual = async (goal: string): Promise<{name: string, tasks: string[]}> => {
    const prompt = `Cr√©e un rituel simple (3 √† 5 t√¢ches) pour un utilisateur d'application de bien-√™tre qui a pour objectif : "${goal}". La r√©ponse doit √™tre en fran√ßais. Fournis un nom de rituel et une liste de t√¢ches.`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            name: {
                type: Type.STRING,
                description: "Un nom court et inspirant pour le rituel."
            },
            tasks: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Une liste de 3 √† 5 t√¢ches simples et concr√®tes pour le rituel."
            }
        },
        required: ["name", "tasks"]
    };

    return generateJsonFromAi<{name: string, tasks: string[]}>(prompt, schema);
};

export const generateCompletionMessage = async (ritualNames: string[]): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `Un utilisateur vient de terminer tous ses rituels quotidiens. Les rituels sont : "${ritualNames.join(', ')}". G√©n√®re un message de f√©licitations court (1 phrase), positif et encourageant en fran√ßais. Sois chaleureux et, si possible, fais un clin d'≈ìil √† l'un des th√®mes des rituels.`
    });
    return response.text.trim().replace(/"/g, '');
};

export const generateGoalSteps = async (goalTitle: string, userRituals: Ritual[]): Promise<{title: string; linkedModule: GoalLinkedModule | null; suggestedRitualName: string | null}[]> => {
    const ritualContext = userRituals.length > 0
        ? `L'utilisateur a d√©j√† les rituels suivants : ${userRituals.map(r => `"${r.name}"`).join(', ')}. Si une √©tape correspond √† l'un de ces rituels, sugg√®re de le lier.`
        : "L'utilisateur n'a pas encore de rituels.";

    const prompt = `Un utilisateur fran√ßais veut atteindre l'objectif suivant : "${goalTitle}". D√©compose cet objectif en 3 √† 5 √©tapes concr√®tes et r√©alisables. Pour chaque √©tape, identifie si elle peut √™tre li√©e √† un module de l'application ('ritual', 'journal', 'assessment'). ${ritualContext}`;
    
    const schema = {
        type: Type.ARRAY,
        items: {
            type: Type.OBJECT,
            properties: {
                title: {
                    type: Type.STRING,
                    description: "Le titre court et clair de l'√©tape."
                },
                linkedModule: {
                    type: Type.STRING,
                    description: "Le type de module √† lier ('ritual', 'journal', 'assessment') ou null si aucun lien direct."
                },
                suggestedRitualName: {
                    type: Type.STRING,
                    description: "Si linkedModule est 'ritual', le nom exact d'un rituel existant √† sugg√©rer. Sinon, null."
                }
            },
            required: ["title", "linkedModule"]
        }
    };
    return generateJsonFromAi<any[]>(prompt, schema);
};

export const generateQuickReframe = async (distressingThought: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `Agis comme un th√©rapeute bienveillant et calme. Un utilisateur se sent d√©pass√© et a partag√© cette pens√©e angoissante : "${distressingThought}". Fournis UNE seule perspective alternative, douce et recadr√©e pour l'aider √† apaiser cette pens√©e. Sois concis (2-3 phrases maximum) et r√©confortant. R√©ponds en fran√ßais. Ne commence pas par "Voici une perspective alternative".`,
    });
    return response.text.trim().replace(/"/g, '');
};

export const findSilverLining = async (toughDayDescription: string): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `Agis comme un coach bienveillant. Un utilisateur a du mal √† trouver de la gratitude aujourd'hui. Voici sa description : "${toughDayDescription}". Aide-le √† trouver une "lueur d'espoir" (silver lining) - une chose, m√™me petite, pour laquelle il pourrait √™tre reconnaissant. Sois doux, empathique et propose une perspective constructive. R√©ponds avec une seule phrase de gratitude sugg√©r√©e que l'utilisateur pourra noter. Ne l'entoure pas de guillemets.`,
    });
    return response.text.trim();
};

export const getDailyAffirmation = async (): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `G√©n√®re une affirmation positive courte, puissante et encourageante en fran√ßais. Elle doit √™tre √† la premi√®re personne (Je...) et inspirante pour une personne utilisant une application de bien-√™tre. Ne l'entoure pas de guillemets.`,
    });
    return response.text.trim();
};

export const generateJournalPrompt = async (): Promise<string> => {
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: `G√©n√®re une seule question de journal introspective et ouverte en fran√ßais. La question doit √™tre bienveillante et encourager une r√©flexion profonde sur les √©motions, les exp√©riences ou la croissance personnelle. Sois concis. Ne l'entoure pas de guillemets.`,
    });
    return response.text.trim();
};

export const getConversationFeedback = async (chatHistory: { role: 'user' | 'model'; text: string }[]): Promise<ConversationFeedback> => {
    const conversationTranscript = chatHistory.map(m => `${m.role === 'user' ? 'Utilisateur' : 'Personnage'}: ${m.text}`).join('\n');

    const prompt = `En tant que coach en communication, analyse la transcription de conversation suivante. L'objectif de l'utilisateur √©tait de s'entra√Æner pour une conversation difficile.
        Concentre-toi UNIQUEMENT sur les r√©pliques de "l'Utilisateur". Fournis des commentaires constructifs et bienveillants en fran√ßais.

        Transcription:
        ${conversationTranscript}
        `;
        
    const schema = {
        type: Type.OBJECT,
        properties: {
            strengths: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 points forts dans la communication de l'utilisateur (ex: 'Bonne utilisation de phrases en 'Je'', 'Clart√© de l'objectif')."
            },
            improvements: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 points d'am√©lioration constructifs (ex: 'Pourrait √™tre plus direct', 'Attention au ton accusateur')."
            },
            suggestions: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        original: { type: Type.STRING, description: "Une phrase exacte dite par l'utilisateur qui pourrait √™tre am√©lior√©e." },
                        suggested: { type: Type.STRING, description: "Une reformulation sugg√©r√©e pour cette phrase." }
                    },
                        required: ["original", "suggested"]
                },
                description: "Fournis 1 ou 2 exemples concrets de reformulation de phrases dites par l'utilisateur."
            }
        },
        required: ["strengths", "improvements", "suggestions"]
    };

    return generateJsonFromAi<ConversationFeedback>(prompt, schema);
};

export const generateProactiveMessage = async (userDataSummary: string, settings: AppSettings): Promise<ProactiveSuggestion | null> => {
    if (userDataSummary.includes("L'utilisateur est nouveau") || userDataSummary.includes("Le partage de contexte est d√©sactiv√©")) {
        return null;
    }

    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Analyse ce r√©sum√© des donn√©es utilisateur et g√©n√®re UN SEUL message proactif et personnalis√©. Le but est de faire un check-in pertinent, pas une suggestion g√©n√©rique.
        - Trouve un point saillant (ex: humeur basse, rituel manqu√©, valeur non explor√©e).
        - Formule un message court et empathique √† ce sujet.
        - Propose une action simple via un module de l'app.
        - Sois tr√®s concis.
        - Si aucun point saillant ne se d√©gage, r√©ponds avec un JSON contenant des cha√Ænes vides.
        - Les moduleId valides sont: 'journal', 'thought-court', 'ritual', 'values', 'goals', 'calm-space'.

        Donn√©es: "${userDataSummary}"`;
        
    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre court et engageant (ex: 'Petite v√©rification')." },
            message: { type: Type.STRING, description: "Le message empathique et personnalis√© (1-2 phrases)." },
            ctaText: { type: Type.STRING, description: "Le texte du bouton d'action (ex: 'Explorer mes pens√©es')." },
            moduleId: { type: Type.STRING, description: "L'ID du module √† ouvrir (ex: 'journal')." },
        },
        required: ["title", "message", "ctaText", "moduleId"]
    };

    const result = await generateJsonFromAi<ProactiveSuggestion>(prompt, schema);
    if (!result.title || !result.message) {
        return null;
    }
    return result;
};

export const analyzeUnsentLetter = async (recipient: string, content: string, settings: AppSettings, connections?: Connection[]): Promise<UnsentLetterAnalysis> => {
    let connectionsContext = '';
    if (connections && connections.length > 0) {
        const allowedConnections = connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© au module '${conn.moduleId}' : "${conn.entryTitle}"`);
            connectionsContext = `Cette lettre est connect√©e aux √©l√©ments suivants. Utilise ce contexte pour enrichir ton analyse, notamment sur les besoins non satisfaits:\n${connectionSummaries.join('\n')}\n`;
        }
    }
    
    const prompt = `Analyse cette "lettre non envoy√©e" d'un utilisateur. Le destinataire est "${recipient}". Le but est de fournir √† l'utilisateur une perspective claire et bienveillante sur ses propres √©motions. R√©ponds en fran√ßais.
        ${connectionsContext}
        Contenu de la lettre:
        "${content}"`;
        
    const schema = {
        type: Type.OBJECT,
        properties: {
            keyEmotions: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-4 √©motions fondamentales exprim√©es dans la lettre (ex: 'Col√®re', 'Tristesse', 'Besoin de reconnaissance')."
            },
            unmetNeeds: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 1-3 besoins non satisfaits que la lettre semble r√©v√©ler (ex: 'Besoin de s√©curit√©', 'Besoin d'√™tre entendu')."
            },
            reflectionPrompt: {
                type: Type.STRING,
                description: "Une question de r√©flexion douce et ouverte pour aider l'utilisateur √† traiter le contenu de la lettre et √† trouver une forme de cl√¥ture."
            }
        },
        required: ["keyEmotions", "unmetNeeds", "reflectionPrompt"]
    };
    return generateJsonFromAi<UnsentLetterAnalysis>(prompt, schema);
};

export const generateFearSettingSuggestions = async (action: string, fear: string): Promise<{ prevention: string[]; repair: string[] }> => {
    const prompt = `Un utilisateur envisage l'action suivante : "${action}".
        Pour cette action, il a identifi√© une peur sp√©cifique : "${fear}".
        G√©n√®re des suggestions concr√®tes pour un exercice de "fear setting" en fran√ßais.
        Fournis des id√©es pour :
        1. Pr√©venir cette situation (pr√©vention).
        2. R√©parer les d√©g√¢ts si elle se produisait quand m√™me (r√©paration).
        Sois concis, pragmatique et encourageant.`;
        
    const schema = {
        type: Type.OBJECT,
        properties: {
            prevention: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Une liste de 2-3 actions concr√®tes pour emp√™cher la peur de se r√©aliser."
            },
            repair: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Une liste de 2-3 actions concr√®tes pour r√©parer la situation si la peur se r√©alisait."
            }
        },
        required: ["prevention", "repair"]
    };
    return generateJsonFromAi<{ prevention: string[]; repair: string[] }>(prompt, schema);
};

export const analyzeProgress = async (summary: string): Promise<ProgressAnalysis> => {
    const prompt = `Analyze this user's progress summary from a wellness app. The user is French. Provide a positive observation, an area for attention, and an actionable suggestion. Keep it concise and encouraging. The user data is: ${summary}`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            positiveObservation: {
                type: Type.STRING,
                description: "Une observation positive et encourageante sur les progr√®s de l'utilisateur."
            },
            areaForAttention: {
                type: Type.STRING,
                description: "Un domaine qui pourrait b√©n√©ficier d'un peu plus d'attention, formul√© de mani√®re douce."
            },
            actionableSuggestion: {
                type: Type.OBJECT,
                properties: {
                    text: { type: Type.STRING, description: "Une suggestion d'action concr√®te." },
                    moduleId: { type: Type.STRING, description: "L'ID du module de l'application pertinent pour l'action." },
                    ctaText: { type: Type.STRING, description: "Le texte du bouton d'appel √† l'action." }
                },
                required: ["text", "moduleId", "ctaText"]
            }
        },
        required: ["positiveObservation", "areaForAttention", "actionableSuggestion"]
    };

    return generateJsonFromAi<ProgressAnalysis>(prompt, schema);
};

export const generateWoundExercise = async (wound: CoreWound): Promise<{ title: string; prompt: string }> => {
    const prompt = `G√©n√®re un court exercice d'√©criture introspectif (un titre et une seule question/prompt) pour une personne travaillant sur sa blessure √©motionnelle de "${wound}". L'exercice doit √™tre bienveillant, constructif et viser la transmutation de la blessure en force. R√©ponds en fran√ßais.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre court et inspirant pour l'exercice." },
            prompt: { type: Type.STRING, description: "La question ou le prompt de r√©flexion pour l'utilisateur." }
        },
        required: ["title", "prompt"]
    };
    return generateJsonFromAi<{ title: string; prompt: string }>(prompt, schema);
};

export const analyzeRelationalEcosystem = async (contacts: RelationalContact[], settings: AppSettings): Promise<RelationalEcosystemAnalysis> => {
    const coachInstruction = getCoachSystemInstruction(settings);
    const contactsSummary = contacts.map(c => `- ${c.name} (Influence: ${c.influence}, Arch√©type: ${c.archetype})`).join('\n');
    const prompt = `${coachInstruction} Analyse cet √©cosyst√®me relationnel. Identifie les forces, les d√©s√©quilibres potentiels, et propose une suggestion constructive pour l'am√©liorer. Sois concis et perspicace. Voici les contacts:\n${contactsSummary}`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            strengths: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 1-2 points forts √©vidents dans cet √©cosyst√®me."
            },
            imbalances: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 1-2 d√©s√©quilibres ou points de vigilance potentiels."
            },
            suggestion: {
                type: Type.STRING,
                description: "Une suggestion constructive pour cultiver un √©cosyst√®me plus sain."
            }
        },
        required: ["strengths", "imbalances", "suggestion"]
    };
    return generateJsonFromAi<RelationalEcosystemAnalysis>(prompt, schema);
};

export const getHerbariumInfo = async (itemName: string): Promise<HerbariumInfo> => {
    const prompt = `Fournis des informations sur "${itemName}" pour une application de bien-√™tre. L'utilisateur est fran√ßais. Sois concis et pratique.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            description: { type: Type.STRING, description: "Une courte description po√©tique ou symbolique." },
            mainBenefits: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 bienfaits principaux (non m√©dicaux)."
            },
            simpleUses: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 utilisations simples et pratiques (ex: 'En infusion avant de dormir')."
            },
            precautions: { type: Type.STRING, description: "Une br√®ve mise en garde ou pr√©caution d'usage g√©n√©rale." }
        },
        required: ["description", "mainBenefits", "simpleUses", "precautions"]
    };
    return generateJsonFromAi<HerbariumInfo>(prompt, schema);
};

export const getCrystalInfo = async (crystalName: string): Promise<CrystalInfo> => {
    const prompt = `Cr√©e un contenu court pour une m√©ditation guid√©e sur le cristal "${crystalName}" pour une application de bien-√™tre. L'utilisateur est fran√ßais.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            intention: { type: Type.STRING, description: "L'intention principale associ√©e √† ce cristal (ex: 'Amour de soi')." },
            affirmation: { type: Type.STRING, description: "Une affirmation positive courte √† la premi√®re personne (Je...)." },
            meditationPrompt: { type: Type.STRING, description: "Une phrase simple pour guider le d√©but d'une m√©ditation." }
        },
        required: ["intention", "affirmation", "meditationPrompt"]
    };
    return generateJsonFromAi<CrystalInfo>(prompt, schema);
};

export const analyzeArtTherapyDrawing = async (base64Image: string): Promise<ArtTherapyAnalysis> => {
    const prompt = "Analyse ce dessin d'art-th√©rapie. L'utilisateur est fran√ßais. Fournis une interpr√©tation symbolique et bienveillante, ainsi qu'une question de r√©flexion. Ne fais pas de diagnostic. Sois encourageant.";
    const imagePart = {
        inlineData: {
            mimeType: 'image/png',
            data: base64Image,
        },
    };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: [imagePart, textPart] },
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    interpretation: { type: Type.STRING, description: "Une interpr√©tation symbolique et douce du dessin (2-3 phrases)." },
                    reflectionPrompt: { type: Type.STRING, description: "Une question ouverte pour aider l'utilisateur √† explorer son ≈ìuvre." }
                },
                required: ["interpretation", "reflectionPrompt"]
            }
        },
    });

    const jsonText = response.text.trim();
    return JSON.parse(jsonText) as ArtTherapyAnalysis;
};

export const generateMonthlySynthesis = async (dataSummary: string, settings: AppSettings): Promise<Omit<SynthesisReport, 'monthId'>> => {
    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Analyse ce r√©sum√© de donn√©es mensuelles d'un utilisateur et g√©n√®re une synth√®se. Sois perspicace et bienveillant. R√©sum√© des donn√©es:\n${dataSummary}`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            emergingThemes: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 th√®mes principaux qui √©mergent des donn√©es du mois."
            },
            progressSummary: { type: Type.STRING, description: "Un r√©sum√© des progr√®s et habitudes observ√©s (rituels, objectifs)." },
            wisdomFromWritings: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Extrait 1 ou 2 citations courtes et marquantes des entr√©es de journal de l'utilisateur."
            },
            suggestionsForNextMonth: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 suggestions concr√®tes pour le mois √† venir."
            }
        },
        required: ["emergingThemes", "progressSummary", "wisdomFromWritings", "suggestionsForNextMonth"]
    };
    return generateJsonFromAi<Omit<SynthesisReport, 'monthId'>>(prompt, schema);
};

export const generateThematicSynthesis = async (theme: string, settings: AppSettings): Promise<Omit<ThematicSynthesis, 'theme'>> => {
    const coachInstruction = getCoachSystemInstruction(settings);
    
    let contextItems: ConnectableItem[] = [];
    const lowerCaseTheme = theme.toLowerCase();

    if (settings.shareContextWithAI.journal) {
        const journalEntries = storage.get<JournalEntry[]>(JOURNAL_STORAGE_KEY, []);
        contextItems = contextItems.concat(journalEntries.map(e => ({ 
            id: e.id, title: e.title, moduleId: 'journal', date: e.date, snippet: e.content 
        })));
    }
    if (settings.shareContextWithAI['thought-court']) {
        const thoughtCases = storage.get<ThoughtCase[]>(THOUGHT_COURT_STORAGE_KEY, []);
        contextItems = contextItems.concat(thoughtCases.map(c => ({ 
            id: c.id, title: c.negativeThought, moduleId: 'thought-court', date: c.date, snippet: `Preuves contre: ${c.evidenceAgainst}\nPens√©e √©quilibr√©e: ${c.balancedThought}` 
        })));
    }
    if (settings.shareContextWithAI['unsent-letters']) {
        const letters = storage.get<UnsentLetter[]>(UNSENT_LETTER_STORAGE_KEY, []);
        contextItems = contextItems.concat(letters.map(l => ({ 
            id: l.id, title: l.subject, moduleId: 'unsent-letters', date: l.date, snippet: `√Ä: ${l.recipient}. Contenu: ${l.content}` 
        })));
    }
    if (settings.shareContextWithAI['dream-journal']) {
        const dreams = storage.get<DreamEntry[]>(DREAM_JOURNAL_STORAGE_KEY, []);
        contextItems = contextItems.concat(dreams.map(d => ({
            id: d.id, title: d.title, moduleId: 'dream-journal', date: d.date, snippet: d.content
        })));
    }

    const relevantItems = contextItems
        .filter(item => 
            item.title.toLowerCase().includes(lowerCaseTheme) || 
            item.snippet.toLowerCase().includes(lowerCaseTheme)
        )
        .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime())
        .slice(0, 20);

    if (relevantItems.length === 0) {
        throw new Error("Aucune entr√©e pertinente trouv√©e pour ce th√®me. Essayez un autre mot-cl√© ou √©crivez davantage dans vos journaux.");
    }
    
    const contextString = relevantItems.map(item => 
        `---
        Module: ${item.moduleId}
        ID: ${item.id}
        Titre: "${item.title}"
        Contenu: "${item.snippet.substring(0, 300)}..."
        ---`
    ).join('\n');

    const prompt = `${coachInstruction} Un utilisateur souhaite explorer le th√®me "${theme}" √† travers ses donn√©es. Analyse les extraits suivants pour g√©n√©rer une synth√®se th√©matique profonde.

    **Instructions:**
    1.  Lis tous les extraits fournis.
    2.  √âcris un r√©sum√© ('summary') qui explique comment le th√®me "${theme}" se manifeste dans la vie de l'utilisateur.
    3.  Identifie 2-3 prises de conscience ('keyInsights') cl√©s. Pour chaque insight, tu DOIS citer les entr√©es qui le soutiennent en utilisant leur 'Module', 'ID' et 'Titre' dans le tableau 'supportingEntries'. Sois pr√©cis.
    4.  D√©cris un sch√©ma de pens√©e ou de comportement r√©current ('emergingPattern') li√© au th√®me.
    5.  Pose une question de r√©flexion ('reflectionPrompt') puissante pour aider l'utilisateur √† approfondir.
    
    **Extraits des donn√©es de l'utilisateur:**
    ${contextString}`;
    
    const schema = {
        type: Type.OBJECT,
        properties: {
            summary: { type: Type.STRING, description: "Un r√©sum√© de la mani√®re dont le th√®me appara√Æt dans les donn√©es de l'utilisateur." },
            keyInsights: {
                type: Type.ARRAY,
                items: {
                    type: Type.OBJECT,
                    properties: {
                        insight: { type: Type.STRING, description: "Une observation cl√© ou une prise de conscience." },
                        supportingEntries: {
                            type: Type.ARRAY,
                            items: {
                                type: Type.OBJECT,
                                properties: {
                                    moduleId: { type: Type.STRING },
                                    entryId: { type: Type.STRING },
                                    title: { type: Type.STRING }
                                },
                                required: ["moduleId", "entryId", "title"]
                            }
                        }
                    },
                    required: ["insight", "supportingEntries"]
                }
            },
            emergingPattern: { type: Type.STRING, description: "Un sch√©ma de pens√©e ou de comportement r√©current li√© au th√®me." },
            reflectionPrompt: { type: Type.STRING, description: "Une question puissante pour aider l'utilisateur √† approfondir sa r√©flexion." }
        },
        required: ["summary", "keyInsights", "emergingPattern", "reflectionPrompt"]
    };
    return generateJsonFromAi<Omit<ThematicSynthesis, 'theme'>>(prompt, schema);
};

export const getTreeInfo = async (treeName: string): Promise<TreeInfo> => {
    const prompt = `Fournis des informations symboliques sur l'arbre "${treeName}" pour une application de bien-√™tre. L'utilisateur est fran√ßais. Sois concis et inspirant.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            description: { type: Type.STRING, description: "Une courte description po√©tique ou symbolique de l'arbre." },
            symbolism: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 symboles cl√©s associ√©s √† cet arbre."
            },
            reflectionPrompt: { type: Type.STRING, description: "Une question de r√©flexion inspir√©e par les qualit√©s de l'arbre." }
        },
        required: ["description", "symbolism", "reflectionPrompt"]
    };
    return generateJsonFromAi<TreeInfo>(prompt, schema);
};

export const getAnimalInfo = async (animalName: string): Promise<AnimalInfo> => {
    const prompt = `Fournis des informations symboliques sur l'animal "${animalName}" pour une application de bien-√™tre. L'utilisateur est fran√ßais. Sois concis et inspirant.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            description: { type: Type.STRING, description: "Une courte description po√©tique ou symbolique de l'animal." },
            symbolism: {
                type: Type.ARRAY,
                items: { type: Type.STRING },
                description: "Liste de 2-3 symboles cl√©s associ√©s √† cet animal."
            },
            lifeLesson: { type: Type.STRING, description: "Une le√ßon de vie que l'on peut apprendre de cet animal." }
        },
        required: ["description", "symbolism", "lifeLesson"]
    };
    return generateJsonFromAi<AnimalInfo>(prompt, schema);
};

export const generateRhythmAdvice = async (chronotype: Chronotype, season: InnerSeason): Promise<{ title: string; advice: string; icon: string }> => {
    const prompt = `G√©n√®re un conseil du jour court et actionnable pour une personne avec un chronotype "${chronotype}" et qui se sent dans sa saison int√©rieure "${season}". Le conseil doit √™tre en fran√ßais, bienveillant et pratique. Fournis un titre, le conseil, et un emoji pertinent.`;

    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre court et accrocheur." },
            advice: { type: Type.STRING, description: "Le conseil du jour (1-2 phrases)." },
            icon: { type: Type.STRING, description: "Un seul emoji pertinent." }
        },
        required: ["title", "advice", "icon"]
    };
    return generateJsonFromAi<{ title: string; advice: string; icon: string }>(prompt, schema);
};

export const generateGratitudeReflection = async (items: string[]): Promise<string> => {
    const prompt = `Based on these points of gratitude: "${items.join(', ')}", generate a short, insightful reflection question to deepen the user's practice. The user is French. The question must be in French.`;
    const response = await ai.models.generateContent({
        model: GEMINI_FLASH_MODEL,
        contents: prompt,
    });
    return response.text.trim().replace(/"/g, '');
};

export const generateWordTreeWords = async (rootWord: string): Promise<string[]> => {
    const prompt = `Pour le mot racine "${rootWord}", g√©n√®re une liste de 6 √† 10 mots ou courtes expressions associ√©s, √©voquant des concepts li√©s, des synonymes po√©tiques ou des id√©es qui en d√©coulent. La r√©ponse doit √™tre en fran√ßais.`;
    const schema = {
        type: Type.OBJECT,
        properties: {
            words: {
                type: Type.ARRAY,
                items: { type: Type.STRING }
            }
        },
        required: ["words"]
    };
    const result = await generateJsonFromAi<{ words: string[] }>(prompt, schema);
    return result.words || [];
};

export const analyzeBodyMap = async (emotion: string, sensations: string[], base64Image: string, settings: AppSettings, connections?: Connection[]): Promise<BodyMapAnalysis> => {
    let connectionsContext = '';
    if (connections && connections.length > 0) {
        const allowedConnections = connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© √† '${conn.entryTitle}' (${conn.moduleId})`).join('\n');
            connectionsContext = `Cette carte est connect√©e aux √©l√©ments suivants. Utilise ce contexte pour une interpr√©tation plus profonde :\n${connectionSummaries}\n`;
        }
    }
    const prompt = `Analyse cette cartographie corporelle pour l'√©motion "${emotion}". L'image montre o√π les sensations sont ressenties. Fournis une interpr√©tation somatique, une suggestion corporelle douce et une question de r√©flexion. Sois bienveillant et non clinique. ${connectionsContext}`;
    
    const imagePart = {
        inlineData: {
            mimeType: 'image/png',
            data: base64Image,
        },
    };
    const textPart = { text: prompt };

    const response = await ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: { parts: [imagePart, textPart] },
        config: {
            responseMimeType: "application/json",
            responseSchema: {
                type: Type.OBJECT,
                properties: {
                    interpretation: { type: Type.STRING, description: "Interpr√©tation somatique de la localisation des sensations (ex: 'La tension dans les √©paules sugg√®re un fardeau...')." },
                    suggestion: { type: Type.STRING, description: "Une suggestion corporelle simple (ex: 'Essayez d'√©tirer doucement votre cou...')." },
                    reflectionPrompt: { type: Type.STRING, description: "Une question pour approfondir la r√©flexion (ex: 'Qu'est-ce que vos √©paules essaient de vous dire ?')." }
                },
                required: ["interpretation", "suggestion", "reflectionPrompt"]
            }
        },
    });

    const jsonText = response.text.trim();
    return JSON.parse(jsonText) as BodyMapAnalysis;
};

export const analyzeFearSettingExercise = async (exercise: FearSettingExercise, settings: AppSettings): Promise<FearSettingAnalysis> => {
    let connectionsContext = '';
    if (exercise.connections && exercise.connections.length > 0) {
        const allowedConnections = exercise.connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© √† '${conn.entryTitle}' (${conn.moduleId})`).join('\n');
            connectionsContext = `Cet exercice est connect√© aux √©l√©ments suivants. Utilise ce contexte pour une analyse plus profonde:\n${connectionSummaries}\n`;
        }
    }

    const exerciseSummary = `
    Action: ${exercise.action}
    Pires sc√©narios: ${exercise.scenarios.map(s => s.fear).join(', ')}
    B√©n√©fices: ${exercise.benefits}
    Co√ªt de l'inaction: 6 mois: ${exercise.costOfInaction.sixMonths}, 1 an: ${exercise.costOfInaction.oneYear}, 3 ans: ${exercise.costOfInaction.threeYears}
    `;

    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Analyse cet exercice de "fear setting". Fournis un r√©sum√©, identifie la peur fondamentale sous-jacente, et propose une perspective encourageante pour aider l'utilisateur √† avancer.
    ${connectionsContext}
    Donn√©es de l'exercice:
    ${exerciseSummary}
    `;

    const schema = {
        type: Type.OBJECT,
        properties: {
            summary: { type: Type.STRING, description: "Un r√©sum√© de l'exercice, mettant en √©vidence le conflit principal entre la peur et les b√©n√©fices." },
            coreFear: { type: Type.STRING, description: "La peur fondamentale qui semble √™tre √† la racine (ex: 'Peur de l'√©chec', 'Peur du jugement')." },
            empoweringInsight: { type: Type.STRING, description: "Une perspective ou une question encourageante qui recadre la situation." }
        },
        required: ["summary", "coreFear", "empoweringInsight"]
    };
    return generateJsonFromAi<FearSettingAnalysis>(prompt, schema);
};

export const weaveNarrativeArcStory = async (entry: NarrativeArcEntry, settings: AppSettings): Promise<NarrativeArcAnalysis> => {
    let connectionsContext = '';
    if (entry.connections && entry.connections.length > 0) {
        const allowedConnections = entry.connections.filter(c => settings.shareContextWithAI[c.moduleId]);
        if (allowedConnections.length > 0) {
            const connectionSummaries = allowedConnections.map(conn => `- Connect√© √† '${conn.entryTitle}' (${conn.moduleId})`).join('\n');
            connectionsContext = `Ce r√©cit est connect√© aux √©l√©ments suivants. Utilise ce contexte pour enrichir l'histoire:\n${connectionSummaries}\n`;
        }
    }

    const entrySummary = `
    - Situation: ${entry.situation}
    - D√©fi: ${entry.challenge}
    - Tournant: ${entry.turningPoint}
    - R√©solution & Le√ßon: ${entry.resolution}
    `;

    const coachInstruction = getCoachSystemInstruction(settings);
    const prompt = `${coachInstruction} Tu es un conteur sage qui aide les gens √† trouver du sens dans leurs exp√©riences.
    L'utilisateur a fourni les √©l√©ments d'une exp√©rience difficile. Ton r√¥le est de les tisser en un r√©cit de croissance puissant et inspirant, √† la troisi√®me personne (en parlant de "l'utilisateur" ou "la personne").
    - Donne un titre √©vocateur √† l'histoire.
    - √âcris l'histoire de mani√®re fluide, en reliant les quatre parties fournies. L'histoire doit √™tre d'environ 3-4 paragraphes.
    - Extrais la le√ßon de croissance la plus importante de cette exp√©rience.
    ${connectionsContext}
    Donn√©es de l'utilisateur:
    ${entrySummary}
    `;

    const schema = {
        type: Type.OBJECT,
        properties: {
            title: { type: Type.STRING, description: "Un titre po√©tique et √©vocateur pour l'histoire." },
            story: { type: Type.STRING, description: "Le r√©cit complet et inspirant de l'exp√©rience, tiss√© √† partir des √©l√©ments fournis par l'utilisateur." },
            keyLesson: { type: Type.STRING, description: "La le√ßon de croissance fondamentale que l'on peut tirer de cette histoire." }
        },
        required: ["title", "story", "keyLesson"]
    };
    return generateJsonFromAi<NarrativeArcAnalysis>(prompt, schema);
};